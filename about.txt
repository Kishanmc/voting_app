Voting Application

WHAT ???
A backend system that allows registered voters to cast a single vote for a candidate.
Admins manage candidate data but cannot vote.

Models?
- Voter Model:
    Fields: username, password, role (admin/voter), voterid (Voter ID), hasVoted
- Candidate Model:
    Fields: name, candidateId, votes

Voting App Functionality

1. Users register as either "voter" or "admin".
2. Voters must register with a unique government-issued Voter ID (`voterid`).
3. Voters login using their Voter ID and password.
4. Admins login using username and password.
5. Voters can only vote once.
6. After voting, voter's status is updated to `hasVoted: true`.
7. Admins cannot vote at all.
8. Admins can add and delete candidates.
9. Authenticated users can view the list of candidates and live voting results sorted by vote count.

---------------------------------------------------------------

Routes

User Authentication:
    /api/voter/register: POST - Register as voter or admin (with role and voterid).
    /api/voter/login: POST - Login (voter: voterid, admin: username)

Voting:
    /api/candidate/candidates: GET - Get the list of candidates.
    /api/candidate/vote: POST - Vote for a candidate (voter only, 1 vote per user).

Vote Counts:
    /api/candidate/results: GET - Get candidates sorted by votes (descending).

Admin Candidate Management:
    /api/candidate/add: POST - Admin adds a new candidate.
    /api/candidate/delete/:candidateId: DELETE - Admin deletes a candidate.

---------------------------------------------------------------

CRUD Operations in MongoDB (via Mongoose)

1. CREATE
---------
- Register a voter/admin:
  `Voter.create({ username, password, role, voterid })`

- Add a candidate:
  `Candidate.create({ name })`

2. READ
-------
- Get voter by voterid or username:
  `Voter.findOne({ voterid })` or `Voter.findOne({ username })`

- Get all candidates:
  `Candidate.find()`

- Get voting results (sorted):
  `Candidate.find().sort({ votes: -1 })`

3. UPDATE
---------
- Cast a vote:
  `candidate.votes += 1; await candidate.save();`
  `voter.hasVoted = true; await voter.save();`

- Change password:
  `Voter.findByIdAndUpdate(userId, { password: newHashedPassword })`

4. DELETE
---------
- Delete candidate by ID:
  `Candidate.findOne({ candidateId })` then `Candidate.deleteOne({ candidateId })`
